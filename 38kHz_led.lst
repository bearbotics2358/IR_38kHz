
38kHz_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000006a  000000de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  000000de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d3  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000046b  00000000  00000000  00000627  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000f5  00000000  00000000  00000a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021e  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000dda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	0c d0       	rcall	.+24     	; 0x44 <main>
  2c:	1c c0       	rjmp	.+56     	; 0x66 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <init>:
*/

void init(void)
{
	// use PB0 and PB1 as outputs (pins 5 & 6 respectively)
	DDRB = 0x03;
  30:	83 e0       	ldi	r24, 0x03	; 3
  32:	87 bb       	out	0x17, r24	; 23
  // toggle pin 5 and pin 6 on compare
  TCCR0A = _BV(WGM01) | _BV(COM0A0) | _BV(COM0B0);
  34:	82 e5       	ldi	r24, 0x52	; 82
  36:	8a bd       	out	0x2a, r24	; 42
  TCCR0B = _BV(CS00);
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	83 bf       	out	0x33, r24	; 51
  
  // 38kHz timer
  OCR0A = (F_CPU/(IR_CLOCK_RATE*2L)-1);
  3c:	88 e6       	ldi	r24, 0x68	; 104
  3e:	89 bd       	out	0x29, r24	; 41
  OCR0B = (F_CPU/(IR_CLOCK_RATE*2L)-1);
  40:	88 bd       	out	0x28, r24	; 40
  42:	08 95       	ret

00000044 <main>:
*/

void init(void)
{
	// use PB0 and PB1 as outputs (pins 5 & 6 respectively)
	DDRB = 0x03;
  44:	83 e0       	ldi	r24, 0x03	; 3
  46:	87 bb       	out	0x17, r24	; 23
  // toggle pin 5 and pin 6 on compare
  TCCR0A = _BV(WGM01) | _BV(COM0A0) | _BV(COM0B0);
  48:	82 e5       	ldi	r24, 0x52	; 82
  4a:	8a bd       	out	0x2a, r24	; 42
  TCCR0B = _BV(CS00);
  4c:	81 e0       	ldi	r24, 0x01	; 1
  4e:	83 bf       	out	0x33, r24	; 51
  
  // 38kHz timer
  OCR0A = (F_CPU/(IR_CLOCK_RATE*2L)-1);
  50:	88 e6       	ldi	r24, 0x68	; 104
  52:	89 bd       	out	0x29, r24	; 41
  OCR0B = (F_CPU/(IR_CLOCK_RATE*2L)-1);
  54:	88 bd       	out	0x28, r24	; 40
{
	init();

	// output is automatic off of timer, so just sleep
	for(;;)
		sleep_mode();
  56:	85 b7       	in	r24, 0x35	; 53
  58:	80 62       	ori	r24, 0x20	; 32
  5a:	85 bf       	out	0x35, r24	; 53
  5c:	88 95       	sleep
  5e:	85 b7       	in	r24, 0x35	; 53
  60:	8f 7d       	andi	r24, 0xDF	; 223
  62:	85 bf       	out	0x35, r24	; 53
  64:	f8 cf       	rjmp	.-16     	; 0x56 <main+0x12>

00000066 <_exit>:
  66:	f8 94       	cli

00000068 <__stop_program>:
  68:	ff cf       	rjmp	.-2      	; 0x68 <__stop_program>
